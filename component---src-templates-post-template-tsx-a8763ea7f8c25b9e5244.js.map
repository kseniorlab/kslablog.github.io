{"version":3,"file":"component---src-templates-post-template-tsx-a8763ea7f8c25b9e5244.js","mappings":"0MA4CA,EA3B2D,YAKvD,IAHAA,EAGD,EAHCA,KACAC,EAED,EAFCA,WACAC,EACD,EADCA,UAGEC,EAAeF,EAAWG,KAAI,SAACC,GAAD,OAChCC,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,qBAAqBC,IAAKH,IAAMC,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,sBAAsBF,OAEpF,OACIC,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,2BAKXD,EAAAA,EAAAA,IAAAA,MAAAA,CAAKG,IAAKP,EAAUQ,UAAWC,IAAI,cACnCL,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,sBACXD,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,8BACVJ,IAELG,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,kBAAkBP,EAAKY,UAAU,EAAEZ,EAAKa,OAAO,OCF9E,EAdyD,YAKrD,IAJAC,EAID,EAJCA,KACAd,EAGD,EAHCA,KACAC,EAED,EAFCA,WACAC,EACD,EADCA,UAEA,OACII,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACIA,EAAAA,EAAAA,IAACS,EAAD,CAAcf,KAAMA,EAAMC,WAAYA,EAAYC,UAAWA,KAC7DI,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,kBAAkBS,wBAAyB,CAACC,OAAQH,OCY/E,EA5ByC,WACrC,IAAMI,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACN,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CACzChB,IAtBA,gCAuBAiB,KAtBC,8CAuBD,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGXC,OAAOC,QAAQP,GAAYQ,SAAQ,YAAmB,IAAjBzB,EAAgB,KAAX0B,EAAW,KACjDZ,EAAWa,aAAa3B,EAAK0B,MAGjChB,EAAQG,QAAQe,YAAYd,MAC7B,KAEIhB,EAAAA,EAAAA,IAAAA,MAAAA,CAAK+B,IAAKnB,K,UC9BrB,EAJ6C,YAAqB,IAATJ,EAAQ,EAARA,KACrD,OAAOR,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,WAAWS,wBAAyB,CAAEC,OAAOH,MC8CvE,EAjC2D,YAKvD,IAHyBwB,EAG1B,EAJCC,KACIC,kBAAqBF,MAEdG,EACZ,EADCC,SAAWD,KAEX,EAeIH,EAAM,GAdNK,KACI7B,EAFR,EAEQA,KAFR,IAGQ8B,YACIC,EAJZ,EAIYA,MACAC,EALZ,EAKYA,QACA9C,EANZ,EAMYA,KACAC,EAPZ,EAOYA,WAEIS,EAThB,EAQYqC,UACIrC,UAEJR,EAXZ,EAWYA,UAEJ8C,EAbR,EAaQA,gBAKR,OAAO1C,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACHA,EAAAA,EAAAA,IAAC2C,EAAAA,EAAD,CAAUJ,MAAOA,EAAOK,YAAaJ,EAASK,IAAKV,EAAMW,MAAO1C,IAChEJ,EAAAA,EAAAA,IAAC+C,EAAD,CAAavC,KAAMA,EAAMd,KAAMA,EAAMC,WAAYA,EAAYC,UAAWA,KACpEI,EAAAA,EAAAA,IAACgD,EAAD,CAAKxC,KAAMkC,KACX1C,EAAAA,EAAAA,IAACiD,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Post/Toc.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport '../../Style.scss'\r\n\r\n\r\nexport type PostHeadInfoProps = {\r\n    // title: string\r\n    date: string\r\n    categories: string[]\r\n    headimage: {\r\n        publicURL: string\r\n    }\r\n}\r\n\r\n\r\n\r\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\r\n    // title,\r\n    date,\r\n    categories,\r\n    headimage\r\n}) {\r\n    // const goBackPage = () => window.history.back()\r\nconst CategoryList = categories.map((name)=>\r\n    <div className=\"post-head-category\" key={name}><div className=\"post-category-text\">{name}</div></div>\r\n)\r\n    return (\r\n        <div className=\"post-head-info-wrapper\">\r\n            {/*<div className=\"prev-page-icon\" onClick={goBackPage}>*/}\r\n            {/*    <FontAwesomeIcon icon={faArrowLeft} />*/}\r\n            {/*    <div className=\"icon-text\">이전 페이지</div>*/}\r\n            {/*</div>*/}\r\n            <img src={headimage.publicURL} alt=\"head-img\" />\r\n            <div className=\"head-list-wrapper\" >\r\n                <div className=\"post-head-category-wrapper\">\r\n                    {CategoryList}\r\n                </div>\r\n                <div className=\"post-head-date\">{date.substring(0,date.length-1)}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostHeadInfo","import React, { FunctionComponent } from 'react'\r\nimport PostHeadInfo from \"components/Post/PostHeadInfo\";\r\n// import styled from '@emotion/styled'\r\n\r\ninterface PostContentProps {\r\n    html: string\r\n    date: string\r\n    categories: string[]\r\n    headimage: {\r\n        publicURL: string\r\n    }\r\n}\r\n\r\n// const MarkdownRenderer = styled.div`\r\n//   // Renderer Style\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   width: 768px;\r\n//   margin: 0 auto;\r\n//   padding: 100px 0;\r\n// `\r\n\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({\r\n    html,\r\n    date,\r\n    categories,\r\n    headimage,\r\n}) {\r\n    return(\r\n        <>\r\n            <PostHeadInfo date={date} categories={categories} headimage={headimage}/>\r\n            <div className=\"post-content-md\" dangerouslySetInnerHTML={{__html: html}}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostContent","import React, { createRef, FunctionComponent, useEffect } from 'react'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'super-mangomango/super-mangomango.github.io' // 자신 계정의 레포지토리로 설정\r\n\r\ntype UtterancesAttributesType = {\r\n    src: string\r\n    repo: string\r\n    'issue-term': string\r\n    label: string\r\n    theme: string\r\n    crossorigin: string\r\n    async: string\r\n};\r\n\r\nconst CommentWidget: FunctionComponent = function () {\r\n    const element = createRef<HTMLDivElement>()\r\n\r\n    useEffect(() => {\r\n        if (element.current === null) return\r\n\r\n        const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n        const attributes: UtterancesAttributesType = {\r\n            src,\r\n            repo,\r\n            'issue-term': 'pathname',\r\n            label: 'Comment',\r\n            theme: `github-light`,\r\n            crossorigin: 'anonymous',\r\n            async: 'true',\r\n        }\r\n\r\n        Object.entries(attributes).forEach(([key, value]) => {\r\n            utterances.setAttribute(key, value)\r\n        })\r\n\r\n        element.current.appendChild(utterances)\r\n    }, [])\r\n\r\n    return <div ref={element} />\r\n}\r\n\r\nexport default CommentWidget","import React, { FunctionComponent } from \"react\";\r\n\r\ninterface  PostTocProps {\r\n    html: string\r\n}\r\n\r\nconst Toc: FunctionComponent<PostTocProps> = function ({ html }) {\r\n    return <div className='post-toc' dangerouslySetInnerHTML={{ __html:html }} />\r\n}\r\n\r\nexport default Toc","import React, { FunctionComponent } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport PostContent from \"components/Post/PostContent\";\r\nimport CommentWidget from \"components/Post/CommentWidget\";\r\nimport Template from \"components/Common/Template\";\r\nimport Toc from \"components/Post/Toc\"\r\n\r\n\r\ntype PostTemplateProps = {\r\n    data: {\r\n        allMarkdownRemark: {\r\n            edges: PostPageItemType[]\r\n        }\r\n    }\r\n    location: {\r\n        href: string\r\n    }\r\n\r\n}\r\n\r\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\r\n    data: {\r\n        allMarkdownRemark: { edges },\r\n    },\r\n    location: {href}\r\n}) {\r\n    const {\r\n        node: {\r\n            html,\r\n            frontmatter: {\r\n                title,\r\n                summary, // 나중에 사용할 예정입니다!\r\n                date,\r\n                categories,\r\n                thumbnail: {\r\n                    publicURL,\r\n                },\r\n                headimage\r\n            },\r\n            tableOfContents\r\n        },\r\n    } = edges[0]\r\n\r\n\r\n    return <>\r\n        <Template title={title} description={summary} url={href} image={publicURL} >\r\n        <PostContent html={html} date={date} categories={categories} headimage={headimage} />\r\n            <Toc html={tableOfContents}/>\r\n            <CommentWidget/>\r\n        </Template>\r\n    </>\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n            headimage {\r\n              publicURL\r\n            }\r\n          }\r\n          tableOfContents\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport type PostPageItemType = {\r\n    node: {\r\n        html: string\r\n        frontmatter: PostFrontmatterType\r\n    }\r\n}"],"names":["date","categories","headimage","CategoryList","map","name","___EmotionJSX","className","key","src","publicURL","alt","substring","length","html","PostHeadInfo","dangerouslySetInnerHTML","__html","element","createRef","useEffect","current","utterances","document","createElement","attributes","repo","label","theme","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","title","summary","thumbnail","tableOfContents","Template","description","url","image","PostContent","Toc","CommentWidget"],"sourceRoot":""}