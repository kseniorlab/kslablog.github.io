{"version":3,"file":"component---src-templates-post-template-tsx-10babc4322d359fea253.js","mappings":"6NAoCA,EAvB2D,YAIvD,IAFAA,EAED,EAFCA,KAIEC,EAFH,EADCC,WAG4BC,KAAI,SAACC,GAAD,OAChCC,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,uBAAqBD,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,sBAAsBF,OAEzE,OACIC,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,2BAKXD,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,qBACVL,IAELI,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,kBAAkBN,EAAKO,UAAU,EAAEP,EAAKQ,OAAO,MCM1E,EA5BmD,YAG9C,IAFAR,EAED,EAFCA,KACAE,EACD,EADCA,WAED,OAAOG,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACHA,EAAAA,EAAAA,IAAAA,SAAAA,CAAQC,UAAU,mBACdD,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,mBACXD,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,cACXD,EAAAA,EAAAA,IAACI,EAAAA,GAAD,CAAMC,GAAK,MACPL,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,YAAYK,IAAKC,EAAAA,EAAMC,IAAI,SAE9CR,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,gBAGnBD,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,mBACXD,EAAAA,EAAAA,IAAAA,KAAAA,CAAIC,UAAU,aAAd,gCAGAD,EAAAA,EAAAA,IAAAA,KAAAA,CAAIC,UAAU,YAAd,sCAMZD,EAAAA,EAAAA,IAACS,EAAD,CAAcd,KAAMA,EAAME,WAAYA,MCb9C,EAJyD,YAAqB,IAATa,EAAQ,EAARA,KACjE,OAAOV,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,UAAU,kBAAkBU,wBAAyB,CAAEC,OAAQF,M,UC0B/E,EA5ByC,WACrC,IAAMG,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACN,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CACzCd,IAtBA,gCAuBAe,KAtBC,8CAuBD,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGXC,OAAOC,QAAQP,GAAYQ,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACjDb,EAAWc,aAAaF,EAAKC,MAGjCjB,EAAQG,QAAQgB,YAAYf,MAC7B,KAEIjB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKiC,IAAKpB,K,UCWrB,EA/B2D,YAKvD,IAHyBqB,EAG1B,EAJCC,KACIC,kBAAqBF,MAEdG,EACZ,EADCC,SAAWD,KAEX,EAcIH,EAAM,GAbNK,KACI7B,EAFR,EAEQA,KAFR,IAGQ8B,YACIC,EAJZ,EAIYA,MACAC,EALZ,EAKYA,QACA/C,EANZ,EAMYA,KACAE,EAPZ,EAOYA,WAPZ,IAQY8C,UAEIC,GAVhB,EASgBC,gBAAmBC,gBATnC,EAUgBF,WAKhB,OAAO5C,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACHA,EAAAA,EAAAA,IAAC+C,EAAAA,EAAD,CAAUN,MAAOA,EAAOO,YAAaN,EAASO,IAAKZ,EAAMa,MAAON,IAChE5C,EAAAA,EAAAA,IAACmD,EAAD,CAAUxD,KAAMA,EAAME,WAAYA,KAClCG,EAAAA,EAAAA,IAACoD,EAAD,CAAa1C,KAAMA,KACfV,EAAAA,EAAAA,IAACqD,EAAD,OACJrD,EAAAA,EAAAA,IAACsD,EAAAA,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport \"../../App.css\"\r\n\r\nexport type PostHeadInfoProps = {\r\n    // title: string\r\n    date: string\r\n    categories: string[]\r\n}\r\n\r\n\r\n\r\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\r\n    // title,\r\n    date,\r\n    categories,\r\n}) {\r\n    // const goBackPage = () => window.history.back()\r\nconst CategoryList = categories.map((name)=>\r\n    <div className=\"post-head-category\"><div className=\"post-category-text\">{name}</div></div>\r\n)\r\n    return (\r\n        <div className=\"post-head-info-wrapper\">\r\n            {/*<div className=\"prev-page-icon\" onClick={goBackPage}>*/}\r\n            {/*    <FontAwesomeIcon icon={faArrowLeft} />*/}\r\n            {/*    <div className=\"icon-text\">이전 페이지</div>*/}\r\n            {/*</div>*/}\r\n            <div className=\"head-list-wrapper\">\r\n                {CategoryList}\r\n            </div>\r\n            <div className=\"post-head-date\">{date.substring(0,date.length-1)}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostHeadInfo","import React, { FunctionComponent } from 'react'\r\nimport { Link } from \"gatsby\"\r\nimport Logo from \"../../images/whitelogo.png\"\r\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\r\nimport '../../App.css'\r\n\r\ntype PostHeadProps = PostHeadInfoProps\r\n\r\n\r\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\r\n     date,\r\n     categories,\r\n }) {\r\n    return <>\r\n        <header className=\"site-head-post\" >\r\n            <div className=\"head-container\">\r\n                <div className=\"head-mast\">\r\n                    <Link to = \"/\">\r\n                        <img className=\"head-logo\" src={Logo} alt=\"로고\" />\r\n                    </Link>\r\n                    <div className=\"mast-left\">\r\n                    </div>\r\n                </div>\r\n                <div className=\"head-main-post\">\r\n                    <h2 className=\"main-text\">\r\n                        안녕하세요. 한국시니어 연구소 기술 블로그입니다.\r\n                    </h2>\r\n                    <h5 className=\"sub-text\">\r\n                        함께 일하고, 함께 성장하기 위해 끊임없이 고민합니다.\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <PostHeadInfo date={date} categories={categories} />\r\n    </>\r\n}\r\n\r\nexport default PostHead","import React, { FunctionComponent } from 'react'\r\n// import styled from '@emotion/styled'\r\n\r\ninterface PostContentProps {\r\n    html: string\r\n}\r\n\r\n// const MarkdownRenderer = styled.div`\r\n//   // Renderer Style\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   width: 768px;\r\n//   margin: 0 auto;\r\n//   padding: 100px 0;\r\n// `\r\n\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\r\n    return <div className=\"post-content-md\" dangerouslySetInnerHTML={{ __html: html }} />\r\n}\r\n\r\nexport default PostContent","import React, { createRef, FunctionComponent, useEffect } from 'react'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'super-mangomango/super-mangomango.github.io' // 자신 계정의 레포지토리로 설정\r\n\r\ntype UtterancesAttributesType = {\r\n    src: string\r\n    repo: string\r\n    'issue-term': string\r\n    label: string\r\n    theme: string\r\n    crossorigin: string\r\n    async: string\r\n};\r\n\r\nconst CommentWidget: FunctionComponent = function () {\r\n    const element = createRef<HTMLDivElement>()\r\n\r\n    useEffect(() => {\r\n        if (element.current === null) return\r\n\r\n        const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n        const attributes: UtterancesAttributesType = {\r\n            src,\r\n            repo,\r\n            'issue-term': 'pathname',\r\n            label: 'Comment',\r\n            theme: `github-light`,\r\n            crossorigin: 'anonymous',\r\n            async: 'true',\r\n        }\r\n\r\n        Object.entries(attributes).forEach(([key, value]) => {\r\n            utterances.setAttribute(key, value)\r\n        })\r\n\r\n        element.current.appendChild(utterances)\r\n    }, [])\r\n\r\n    return <div ref={element} />\r\n}\r\n\r\nexport default CommentWidget","import React, { FunctionComponent } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport PostHead from \"../components/Post/PostHead\";\r\nimport PostContent from \"components/Post/PostContent\";\r\nimport Footer from \"components/Footer\";\r\nimport CommentWidget from \"components/Post/CommentWidget\";\r\nimport Template from \"components/Common/Template\";\r\n\r\ntype PostTemplateProps = {\r\n    data: {\r\n        allMarkdownRemark: {\r\n            edges: PostPageItemType[] // 존재하지 않는 타입이므로 에러가 발생하지만 일단 작성해주세요\r\n        }\r\n    }\r\n    location: {\r\n        href: string\r\n    }\r\n\r\n}\r\n\r\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\r\n    data: {\r\n        allMarkdownRemark: { edges },\r\n    },\r\n    location: {href}\r\n}) {\r\n    const {\r\n        node: {\r\n            html,\r\n            frontmatter: {\r\n                title,\r\n                summary, // 나중에 사용할 예정입니다!\r\n                date,\r\n                categories,\r\n                thumbnail: {\r\n                    childImageSharp: { gatsbyImageData },\r\n                    publicURL,\r\n                },\r\n            },\r\n        },\r\n    } = edges[0]\r\n    return <>\r\n        <Template title={title} description={summary} url={href} image={publicURL}>\r\n        <PostHead date={date} categories={categories}/>\r\n        <PostContent html={html} />\r\n            <CommentWidget/>\r\n        <Footer />\r\n        </Template>\r\n    </>\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport type PostPageItemType = {\r\n    node: {\r\n        html: string\r\n        frontmatter: PostFrontmatterType\r\n    }\r\n}"],"names":["date","CategoryList","categories","map","name","___EmotionJSX","className","substring","length","Link","to","src","Logo","alt","PostHeadInfo","html","dangerouslySetInnerHTML","__html","element","createRef","useEffect","current","utterances","document","createElement","attributes","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","title","summary","thumbnail","publicURL","childImageSharp","gatsbyImageData","Template","description","url","image","PostHead","PostContent","CommentWidget","Footer"],"sourceRoot":""}